usethis::usecourse("https://github.com/laderast/AnalyticsCourse/blob/2019/in-class/LogisticRegression.Rmd")
usethis::use_course("https://github.com/laderast/AnalyticsCourse/blob/2019/in-class/LogisticRegression.Rmd")
usethis::use_course("https://github.com/laderast/AnalyticsCourse/blob/2019/in-class/LogisticRegression.Rmd")
renv::activate()
install. packages("tidyverse")
install.packages("tidyverse")
renv
install.renv()
install.packages("renv")
library(tidyverse)
library(renv)
install.packages(c("tidyverse", "renv"))
renv::activate()
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
#connect to our database
con <- dbConnect(drv=SQLite(), dbname=here("data/patient1.sqlite"))
#load the RSQLite library
library(RSQLite)
install.packages("RSQLite")
#load the RSQLite library
library(RSQLite)
library(here)
install.packages("here")
#load the RSQLite library
library(RSQLite)
library(here)
install.packages(c("backports", "here"))
install.packages("backports")
knitr::opts_chunk$set(echo = TRUE)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
install.packages("backports")
install.packages("here")
knitr::opts_chunk$set(echo = TRUE)
#load the RSQLite library
library(RSQLite)
library(here)
#connect to our database
con <- dbConnect(drv=SQLite(), dbname=here("data/patient1.sqlite"))
analytic_table <- read.csv(analytic_table.csv)
#connect to our database
con <- dbConnect(drv=SQLite(), dbname=here("data/patient1.sqlite"))
analytic_table <- read.csv('analytic_table.csv')
dbWriteTable(conn = con,
name="analyticTable",
value = analytic_table,
overwrite=TRUE)
dbListTables(con)
sqlStatement <- "SELECT *
FROM analyticTable"
queryResult <- tbl(con, sql(sqlStatement))
#load the RSQLite library
library(RSQLite)
library(here)
sqlStatement <- "SELECT *
FROM analyticTable"
queryResult <- tbl(con, sql(sqlStatement))
install.packages("dplyr")
#load the RSQLite library
library(RSQLite)
library(here)
library(dplyr)
#connect to our database
con <- dbConnect(drv=SQLite(), dbname=here("data/patient1.sqlite"))
analytic_table <- read.csv('analytic_table.csv')
dbWriteTable(conn = con,
name="analyticTable",
value = analytic_table,
overwrite=TRUE)
dbListTables(con)
sqlStatement <- "SELECT *
FROM analyticTable"
queryResult <- tbl(con, sql(sqlStatement))
install.packages("dbplyr")
sqlStatement <- "SELECT *
FROM analyticTable"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, Admit_date-Discharge_date as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, DATEDIFF(Admit_date,Discharge_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, DATE_DIFF(Admit_date,Discharge_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, Discharge_date-Admit_date as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, date(Discharge_date)-date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, Date(Discharge_date)-Date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, date(Discharge_date)-date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, date(Discharge_date)-date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, date(Discharge_date), date(Discharge_date)-date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, date(Discharge_date,+1 year), date(Discharge_date)-date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, date(Discharge_date,'+1 yr'), date(Discharge_date)-date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, date(Discharge_date,'+1 year'), date(Discharge_date)-date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, date(Discharge_date)-date(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT patientid, Event_ID,
Admit_date, Discharge_date, julianday(Discharge_date)-julianday(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *, julianday(Discharge_date)-julianday(Admit_date) as Length_of_stay
FROM analyticTable
WHERE index_admit = 1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM patient_encounter_hosp"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM analyticTable LEFT JOIN patient_encounter_hosp USING(patientID, Event_ID)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *, CASE
WHEN Admit_source = 'Emergency Room THEN 3
ELSE 0 END as Admission_acuity
FROM patient_encounter_hosp"
queryResult <- tbl(con, sql(sqlStatement))
sqlStatement <- "SELECT *, CASE
WHEN Admit_source = 'Emergency Room THEN 3
ELSE 0 END as Admission_acuity
FROM patient_encounter_hosp"
sqlStatement <- "SELECT *
FROM patient_encounter_hosp"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *, CASE
WHEN Admit_source = 'Emergency Room THEN 3
ELSE 0 END as Admission_acuity
FROM patient_encounter_hosp"
queryResult <- tbl(con, sql(sqlStatement))
sqlStatement <- "SELECT *, CASE WHEN Admit_source = 'Emergency Room THEN 3
ELSE 0 END as Admission_acuity
FROM patient_encounter_hosp"
queryResult <- tbl(con, sql(sqlStatement))
sqlStatement <- "SELECT *, CASE
WHEN Admit_source = 'Emergency Room' THEN 3
ELSE 0 END as Admission_acuity
FROM patient_encounter_hosp"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#This answers the prompt, but...
sqlStatement <- "SELECT *, CASE
WHEN Admit_source = 'Emergency Room' THEN 3
ELSE 0 END as Admission_acuity
FROM patient_encounter_hosp"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#I want everything in my analytic table
sqlStatement <- "SELECT *, julianday(Discharge_date)-julianday(Admit_date) as Length_of_stay, CASE
WHEN Admit_source = 'Emergency Room' THEN 3
ELSE 0 END as Admission_acuity
FROM analyticTable"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM patient_encounter"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM t_encounter_type"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM patient_encounter
WHERE encounterType = 48"
queryResult <- tbl(con, sql(sqlStatement))
sqlStatement <- "SELECT *
FROM patient_encounter
"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM patient_encounter
WHERE encounter_type = 48"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM patient_encounter
WHERE encounter_type = 48 AND patientID =1"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM patient_encounter
WHERE encounter_type = 48"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
sqlStatement <- "SELECT *
FROM analyticTable JOIN (SELECT patientID, num_att_visits, i, Actual_date FROM patient_encounter WHERE encounter_type = 48) USING (patientID)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#what is num_att_vists?
sqlStatement <- "SELECT *, SUM(num_att_visits)
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID
HAVING date(Admit_date, '- 6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#what is num_att_vists?
sqlStatement <- "SELECT *, SUM(num_att_visits)
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID
HAVING date(Admit_date, '- 6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#what is num_att_vists?
sqlStatement <- "SELECT *, SUM(num_att_visits)
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID"
#HAVING date(Admit_date, '- 6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#what is num_att_vists?
sqlStatement <- "SELECT analyticTable.*, CASE
WHEN count(num_att_visits) > 4 THEN 4
ELSE cout(num_att_visits) END as ED_visits_score
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID"
#HAVING date(Admit_date, '-6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
#what is num_att_vists?
sqlStatement <- "SELECT analyticTable.*, CASE
WHEN count(num_att_visits) > 4 THEN 4
ELSE count(num_att_visits) END as ED_visits_score
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID"
#HAVING date(Admit_date, '-6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#what is num_att_vists?
sqlStatement <- "SELECT analyticTable.*, CASE
WHEN count(num_att_visits) > 4 THEN 4
ELSE count(num_att_visits) END as ED_visits_score
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID
HAVING date(Admit_date, '-6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#what is num_att_vists?
sqlStatement <- "SELECT analyticTable.*, julianday(Discharge_date)-julianday(Admit_date) as Length_of_stay, CASE
WHEN Admit_source = 'Emergency Room' THEN 3
ELSE 0 END as Admission_acuity, CASE
WHEN count(num_att_visits) > 4 THEN 4
ELSE count(num_att_visits) END as ED_visits_score
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID
HAVING date(Admit_date, '-6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
#what is num_att_vists?
sqlStatement <- "SELECT analyticTable.*, julianday(Discharge_date)-julianday(Admit_date) as Length_of_stay, CASE
WHEN Admit_source = 'Emergency Room' THEN 3
ELSE 0 END as Admission_acuity, CASE
WHEN count(num_att_visits) > 4 THEN 4
ELSE count(num_att_visits) END as ED_visits_score
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID
HAVING date(Admit_date, '-6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
queryResult <-collect(queryResult)
queryResult
dbWriteTable(conn = con,
name="analyticTable",
value = tableResult,
overwrite=TRUE)
#what is num_att_vists?
sqlStatement <- "SELECT analyticTable.*, julianday(Discharge_date)-julianday(Admit_date) as Length_of_stay, CASE
WHEN Admit_source = 'Emergency Room' THEN 3
ELSE 0 END as Admission_acuity, CASE
WHEN count(num_att_visits) > 4 THEN 4
ELSE count(num_att_visits) END as ED_visits_score
FROM analyticTable JOIN (
SELECT patientID, num_att_visits, i, Actual_date
FROM patient_encounter
WHERE encounter_type = 48
) USING (patientID)
GROUP BY patientID, Event_ID
HAVING date(Admit_date, '-6 months')<date(Actual_date)<date(Admit_date)"
queryResult <- tbl(con, sql(sqlStatement))
tableResult <-collect(queryResult)
queryResult
dbWriteTable(conn = con,
name="analyticTable",
value = tableResult,
overwrite=TRUE)
sqlStatement <- "SELECT * FROM analyticTable"
queryResult <- tbl(con, sql(sqlStatement))
queryResult
dbDisconnect(con)
knitr::opts_chunk$set(echo = TRUE)
