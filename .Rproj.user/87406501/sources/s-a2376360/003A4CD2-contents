---
title: "Week 4-5 Assignment"
author: "Barrett Campbell"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

```

## Query Code

Your final problem in the prework is to identify the `index_admit` cases in the `patient_encounter_table` which have a readmission within 30 days of the `index_admit`'s discharge date. Code this as a case statement and save the results as another variable called `readmit30` in your table. 

Your final table should look like this:

```{r echo=FALSE}
tab <- read.delim("peh_example.txt")
tab
```

There are multiple routes to do this: 

1) You can first identify the index cases, save that version of `patient_encounter_hosp` as a table in your database, and then identify the cases within the index variable. 

2) OR, you can also combine the two cases into a single statement, because we know that there are only two types of entries in these table. How could you do that? (Hint: you will have to do another self-join.)

Put your query code below. This query should be able to run and you should show the first few rows of your query.

```{r}
#load the RSQLite library
library(RSQLite)
library(here)
library(tidyverse)

#connect to our database
#if you have named your database differently, change the dbname argument
con <- dbConnect(drv=SQLite(), dbname=here("data/patient1.sqlite"))

```

```{r}

sqlStatement <- "SELECT peh.patientid as patientID, 
                  peh.Event_ID as Event_ID,
                  peh.encounter_type as encounter_type,
                  peh.outcome as outcome,
                  peh.Admit_date as Admit_Date, 
                  peh.Discharge_date as Discharge_date,
                  peh.Admit_source as Admit_source,
                  CASE WHEN readmit_30 IS NULL THEN 0 
                  ELSE readmit_30
                  END as readmit30,
                  CASE WHEN pehAdmitDate = peh.Admit_Date  IS NULL THEN 0 
                  ELSE 1
                  END as index_admit
                FROM patient_encounter_hosp peh
                LEFT JOIN (SELECT patientID as IPatientID, pehAdmitDate,
                            SUM(CASE WHEN date(pehR.Admit_date, '-30 day') <= date(pehDischargeDate) AND pehAdmitDate <> pehR.Admit_date THEN 1 ELSE 0 END) as readmit_30
                            FROM (SELECT pehI.patientid as PatientID,
                              MIN(date(pehI.Admit_date)) as pehAdmitDate,
                              MIN(date(pehI.Discharge_date)) as pehDischargeDate
                              FROM patient_encounter_hosp pehI
                              GROUP BY pehI.patientid)
                            LEFT JOIN patient_encounter_hosp pehR USING (PatientID)
                            GROUP BY patientid)
                ON peh.patientID = IPatientID
                AND peh.Admit_date = pehAdmitDate"

queryResult <- tbl(con, sql(sqlStatement))

queryResult
```

```{r}
## When you're done, save your query to the database as "analytic_table" and also save it to disk as `analytic_table.csv`.

analytic_table <- collect(queryResult)

dbWriteTable(conn = con, name="analytic_table",value = analytic_table,overwrite=TRUE)

dbListTables(con)
```

```{r}
## Don't forget to disconnect!
dbDisconnect(con)

write.csv(analytic_table, file = "analytic_table.csv", row.names = FALSE)
```

## Be Patient

This is a challenging query to get right, which is why we give you two weeks. If you need more help putting this together, consult the `hintsWeek45.pdf` file in this assignment.

Don't hestitate to reach out either by Slack or come to the drop-in sessions. 

## Question 1

1) How many index cases are there?

Answer: 34532

```{r}
## put your code here
con <- dbConnect(drv=SQLite(), dbname=here("data/patient1.sqlite"))

sqlStatement <- "SELECT SUM(index_admit) FROM analytic_table"
  
  
queryResult <- tbl(con, sql(sqlStatement))

queryResult
```

## Question 2

2) How many readmit30 cases are there?

Answer: 5169

```{r}
## put your code here

sqlStatement <- "SELECT SUM(readmit30) FROM analytic_table"
  
  
queryResult <- tbl(con, sql(sqlStatement))

queryResult
```

```{r}
dbDisconnect(con)
```
